//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class SensorEntity {

    static readonly DetectChar detectCharComponent = new DetectChar();

    public bool isDetectChar {
        get { return HasComponent(SensorComponentsLookup.DetectChar); }
        set {
            if (value != isDetectChar) {
                var index = SensorComponentsLookup.DetectChar;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : detectCharComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class SensorMatcher {

    static Entitas.IMatcher<SensorEntity> _matcherDetectChar;

    public static Entitas.IMatcher<SensorEntity> DetectChar {
        get {
            if (_matcherDetectChar == null) {
                var matcher = (Entitas.Matcher<SensorEntity>)Entitas.Matcher<SensorEntity>.AllOf(SensorComponentsLookup.DetectChar);
                matcher.componentNames = SensorComponentsLookup.componentNames;
                _matcherDetectChar = matcher;
            }

            return _matcherDetectChar;
        }
    }
}
