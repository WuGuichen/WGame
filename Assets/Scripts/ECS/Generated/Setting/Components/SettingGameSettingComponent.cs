//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class SettingContext {

    public SettingEntity gameSettingEntity { get { return GetGroup(SettingMatcher.GameSetting).GetSingleEntity(); } }
    public GameSettingComponent gameSetting { get { return gameSettingEntity.gameSetting; } }
    public bool hasGameSetting { get { return gameSettingEntity != null; } }

    public SettingEntity SetGameSetting(GameSetting newValue) {
        if (hasGameSetting) {
            throw new Entitas.EntitasException("Could not set GameSetting!\n" + this + " already has an entity with GameSettingComponent!",
                "You should check if the context already has a gameSettingEntity before setting it or use context.ReplaceGameSetting().");
        }
        var entity = CreateEntity();
        entity.AddGameSetting(newValue);
        return entity;
    }

    public void ReplaceGameSetting(GameSetting newValue) {
        var entity = gameSettingEntity;
        if (entity == null) {
            entity = SetGameSetting(newValue);
        } else {
            entity.ReplaceGameSetting(newValue);
        }
    }

    public void RemoveGameSetting() {
        gameSettingEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class SettingEntity {

    public GameSettingComponent gameSetting { get { return (GameSettingComponent)GetComponent(SettingComponentsLookup.GameSetting); } }
    public bool hasGameSetting { get { return HasComponent(SettingComponentsLookup.GameSetting); } }

    public void AddGameSetting(GameSetting newValue) {
        var index = SettingComponentsLookup.GameSetting;
        var component = (GameSettingComponent)CreateComponent(index, typeof(GameSettingComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceGameSetting(GameSetting newValue) {
        var index = SettingComponentsLookup.GameSetting;
        var component = (GameSettingComponent)CreateComponent(index, typeof(GameSettingComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveGameSetting() {
        RemoveComponent(SettingComponentsLookup.GameSetting);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class SettingMatcher {

    static Entitas.IMatcher<SettingEntity> _matcherGameSetting;

    public static Entitas.IMatcher<SettingEntity> GameSetting {
        get {
            if (_matcherGameSetting == null) {
                var matcher = (Entitas.Matcher<SettingEntity>)Entitas.Matcher<SettingEntity>.AllOf(SettingComponentsLookup.GameSetting);
                matcher.componentNames = SettingComponentsLookup.componentNames;
                _matcherGameSetting = matcher;
            }

            return _matcherGameSetting;
        }
    }
}
