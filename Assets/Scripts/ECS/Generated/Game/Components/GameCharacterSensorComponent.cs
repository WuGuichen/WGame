//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public CharacterSensorComponent characterSensor { get { return (CharacterSensorComponent)GetComponent(GameComponentsLookup.CharacterSensor); } }
    public bool hasCharacterSensor { get { return HasComponent(GameComponentsLookup.CharacterSensor); } }

    public void AddCharacterSensor(int newDetectMask, float newRadius) {
        var index = GameComponentsLookup.CharacterSensor;
        var component = (CharacterSensorComponent)CreateComponent(index, typeof(CharacterSensorComponent));
        component.detectMask = newDetectMask;
        component.radius = newRadius;
        AddComponent(index, component);
    }

    public void ReplaceCharacterSensor(int newDetectMask, float newRadius) {
        var index = GameComponentsLookup.CharacterSensor;
        var component = (CharacterSensorComponent)CreateComponent(index, typeof(CharacterSensorComponent));
        component.detectMask = newDetectMask;
        component.radius = newRadius;
        ReplaceComponent(index, component);
    }

    public void RemoveCharacterSensor() {
        RemoveComponent(GameComponentsLookup.CharacterSensor);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCharacterSensor;

    public static Entitas.IMatcher<GameEntity> CharacterSensor {
        get {
            if (_matcherCharacterSensor == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CharacterSensor);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCharacterSensor = matcher;
            }

            return _matcherCharacterSensor;
        }
    }
}
