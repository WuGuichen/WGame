//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/2023UnityFile/ARPG_2023/Assets/Scripts/WLang/Runtime/WLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class WLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		BOOLEAN=18, NULL=19, PASS=20, RETURN=21, IMPORT=22, DEFINE=23, CACHE_DEFINE=24, 
		WAIT=25, DO=26, AND=27, OR=28, WAITTIME=29, SELECTOR=30, SEQUENCE=31, 
		TRIGGER=32, CONDITION=33, TRIGGER_TIME=34, TRANS_TO_ANY=35, STATE=36, 
		CODE=37, BTREE=38, AT=39, SHARP=40, OP_EQUAL=41, OP_ADD=42, OP_SUB=43, 
		OP_MUL=44, OP_DIV=45, IF=46, ELSEIF=47, ELSE=48, IN=49, WHILE=50, FOR=51, 
		OPENBRACE=52, CLOSEBRACE=53, OPENBRACK=54, CLOSEBRACK=55, OPENPAREN=56, 
		CLOSEPAREN=57, ID=58, INT=59, FLOAT=60, WS=61, CHAR=62, STRING=63, SLCOMMENT=64, 
		COMMNET=65, TITLE=66;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"BOOLEAN", "NULL", "PASS", "RETURN", "IMPORT", "DEFINE", "CACHE_DEFINE", 
		"WAIT", "DO", "AND", "OR", "WAITTIME", "SELECTOR", "SEQUENCE", "TRIGGER", 
		"CONDITION", "TRIGGER_TIME", "TRANS_TO_ANY", "STATE", "CODE", "BTREE", 
		"AT", "SHARP", "OP_EQUAL", "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "IF", 
		"ELSEIF", "ELSE", "IN", "WHILE", "FOR", "OPENBRACE", "CLOSEBRACE", "OPENBRACK", 
		"CLOSEBRACK", "OPENPAREN", "CLOSEPAREN", "ID", "LETTER", "INT", "FLOAT", 
		"WS", "CHAR", "STRING", "SLCOMMENT", "COMMNET", "TITLE"
	};


	public WLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public WLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'->'", "'<-'", "':'", "','", "'!'", "'*='", "'/='", "'+='", "'-='", 
		"'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'=>'", "'.'", null, "'nil'", 
		"'pass'", "'return'", "'import'", "'def'", "'cDef'", "'WAIT'", "'DO'", 
		"'and'", "'or'", "'WAITTIME'", "'SELECTOR'", "'SEQUENCE'", "'TRIGGER'", 
		"'CONDITION'", "'TRIGGER_TIME'", "'TRANS_TO_ANY'", "'STATE'", "'CODE'", 
		"'BTREE'", "'@'", "'#'", "'='", "'+'", "'-'", "'*'", "'/'", "'if'", "'elif'", 
		"'else'", "'in'", "'while'", "'for'", "'{'", "'}'", "'['", "']'", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "BOOLEAN", "NULL", "PASS", "RETURN", 
		"IMPORT", "DEFINE", "CACHE_DEFINE", "WAIT", "DO", "AND", "OR", "WAITTIME", 
		"SELECTOR", "SEQUENCE", "TRIGGER", "CONDITION", "TRIGGER_TIME", "TRANS_TO_ANY", 
		"STATE", "CODE", "BTREE", "AT", "SHARP", "OP_EQUAL", "OP_ADD", "OP_SUB", 
		"OP_MUL", "OP_DIV", "IF", "ELSEIF", "ELSE", "IN", "WHILE", "FOR", "OPENBRACE", 
		"CLOSEBRACE", "OPENBRACK", "CLOSEBRACK", "OPENPAREN", "CLOSEPAREN", "ID", 
		"INT", "FLOAT", "WS", "CHAR", "STRING", "SLCOMMENT", "COMMNET", "TITLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,66,457,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,
		1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,
		9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,
		1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
		190,8,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
		22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
		26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,
		36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,
		39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,
		46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,
		49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,
		53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,5,57,382,8,57,10,57,12,
		57,385,9,57,1,58,1,58,1,59,4,59,390,8,59,11,59,12,59,391,1,60,1,60,1,60,
		1,60,1,61,4,61,399,8,61,11,61,12,61,400,1,61,1,61,1,62,1,62,1,62,1,62,
		1,63,1,63,5,63,411,8,63,10,63,12,63,414,9,63,1,63,1,63,1,64,1,64,1,64,
		1,64,5,64,422,8,64,10,64,12,64,425,9,64,1,64,1,64,1,64,1,64,1,65,1,65,
		1,65,1,65,5,65,435,8,65,10,65,12,65,438,9,65,1,65,1,65,1,65,1,65,1,65,
		1,66,1,66,1,66,1,66,5,66,449,8,66,10,66,12,66,452,9,66,1,66,1,66,1,66,
		1,66,3,423,436,450,0,67,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
		45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
		69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
		93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
		57,115,58,117,0,119,59,121,60,123,61,125,62,127,63,129,64,131,65,133,66,
		1,0,5,2,0,48,57,95,95,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,
		3,0,10,10,13,13,34,34,464,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
		0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
		19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
		0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
		0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
		0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
		1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
		0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
		0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,
		0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,1,135,1,0,0,0,3,138,1,
		0,0,0,5,141,1,0,0,0,7,143,1,0,0,0,9,145,1,0,0,0,11,147,1,0,0,0,13,150,
		1,0,0,0,15,153,1,0,0,0,17,156,1,0,0,0,19,159,1,0,0,0,21,162,1,0,0,0,23,
		165,1,0,0,0,25,167,1,0,0,0,27,170,1,0,0,0,29,172,1,0,0,0,31,175,1,0,0,
		0,33,178,1,0,0,0,35,189,1,0,0,0,37,191,1,0,0,0,39,195,1,0,0,0,41,200,1,
		0,0,0,43,207,1,0,0,0,45,214,1,0,0,0,47,218,1,0,0,0,49,223,1,0,0,0,51,228,
		1,0,0,0,53,231,1,0,0,0,55,235,1,0,0,0,57,238,1,0,0,0,59,247,1,0,0,0,61,
		256,1,0,0,0,63,265,1,0,0,0,65,273,1,0,0,0,67,283,1,0,0,0,69,296,1,0,0,
		0,71,309,1,0,0,0,73,315,1,0,0,0,75,320,1,0,0,0,77,326,1,0,0,0,79,328,1,
		0,0,0,81,330,1,0,0,0,83,332,1,0,0,0,85,334,1,0,0,0,87,336,1,0,0,0,89,338,
		1,0,0,0,91,340,1,0,0,0,93,343,1,0,0,0,95,348,1,0,0,0,97,353,1,0,0,0,99,
		356,1,0,0,0,101,362,1,0,0,0,103,366,1,0,0,0,105,368,1,0,0,0,107,370,1,
		0,0,0,109,372,1,0,0,0,111,374,1,0,0,0,113,376,1,0,0,0,115,378,1,0,0,0,
		117,386,1,0,0,0,119,389,1,0,0,0,121,393,1,0,0,0,123,398,1,0,0,0,125,404,
		1,0,0,0,127,408,1,0,0,0,129,417,1,0,0,0,131,430,1,0,0,0,133,444,1,0,0,
		0,135,136,5,45,0,0,136,137,5,62,0,0,137,2,1,0,0,0,138,139,5,60,0,0,139,
		140,5,45,0,0,140,4,1,0,0,0,141,142,5,58,0,0,142,6,1,0,0,0,143,144,5,44,
		0,0,144,8,1,0,0,0,145,146,5,33,0,0,146,10,1,0,0,0,147,148,5,42,0,0,148,
		149,5,61,0,0,149,12,1,0,0,0,150,151,5,47,0,0,151,152,5,61,0,0,152,14,1,
		0,0,0,153,154,5,43,0,0,154,155,5,61,0,0,155,16,1,0,0,0,156,157,5,45,0,
		0,157,158,5,61,0,0,158,18,1,0,0,0,159,160,5,61,0,0,160,161,5,61,0,0,161,
		20,1,0,0,0,162,163,5,33,0,0,163,164,5,61,0,0,164,22,1,0,0,0,165,166,5,
		62,0,0,166,24,1,0,0,0,167,168,5,62,0,0,168,169,5,61,0,0,169,26,1,0,0,0,
		170,171,5,60,0,0,171,28,1,0,0,0,172,173,5,60,0,0,173,174,5,61,0,0,174,
		30,1,0,0,0,175,176,5,61,0,0,176,177,5,62,0,0,177,32,1,0,0,0,178,179,5,
		46,0,0,179,34,1,0,0,0,180,181,5,116,0,0,181,182,5,114,0,0,182,183,5,117,
		0,0,183,190,5,101,0,0,184,185,5,102,0,0,185,186,5,97,0,0,186,187,5,108,
		0,0,187,188,5,115,0,0,188,190,5,101,0,0,189,180,1,0,0,0,189,184,1,0,0,
		0,190,36,1,0,0,0,191,192,5,110,0,0,192,193,5,105,0,0,193,194,5,108,0,0,
		194,38,1,0,0,0,195,196,5,112,0,0,196,197,5,97,0,0,197,198,5,115,0,0,198,
		199,5,115,0,0,199,40,1,0,0,0,200,201,5,114,0,0,201,202,5,101,0,0,202,203,
		5,116,0,0,203,204,5,117,0,0,204,205,5,114,0,0,205,206,5,110,0,0,206,42,
		1,0,0,0,207,208,5,105,0,0,208,209,5,109,0,0,209,210,5,112,0,0,210,211,
		5,111,0,0,211,212,5,114,0,0,212,213,5,116,0,0,213,44,1,0,0,0,214,215,5,
		100,0,0,215,216,5,101,0,0,216,217,5,102,0,0,217,46,1,0,0,0,218,219,5,99,
		0,0,219,220,5,68,0,0,220,221,5,101,0,0,221,222,5,102,0,0,222,48,1,0,0,
		0,223,224,5,87,0,0,224,225,5,65,0,0,225,226,5,73,0,0,226,227,5,84,0,0,
		227,50,1,0,0,0,228,229,5,68,0,0,229,230,5,79,0,0,230,52,1,0,0,0,231,232,
		5,97,0,0,232,233,5,110,0,0,233,234,5,100,0,0,234,54,1,0,0,0,235,236,5,
		111,0,0,236,237,5,114,0,0,237,56,1,0,0,0,238,239,5,87,0,0,239,240,5,65,
		0,0,240,241,5,73,0,0,241,242,5,84,0,0,242,243,5,84,0,0,243,244,5,73,0,
		0,244,245,5,77,0,0,245,246,5,69,0,0,246,58,1,0,0,0,247,248,5,83,0,0,248,
		249,5,69,0,0,249,250,5,76,0,0,250,251,5,69,0,0,251,252,5,67,0,0,252,253,
		5,84,0,0,253,254,5,79,0,0,254,255,5,82,0,0,255,60,1,0,0,0,256,257,5,83,
		0,0,257,258,5,69,0,0,258,259,5,81,0,0,259,260,5,85,0,0,260,261,5,69,0,
		0,261,262,5,78,0,0,262,263,5,67,0,0,263,264,5,69,0,0,264,62,1,0,0,0,265,
		266,5,84,0,0,266,267,5,82,0,0,267,268,5,73,0,0,268,269,5,71,0,0,269,270,
		5,71,0,0,270,271,5,69,0,0,271,272,5,82,0,0,272,64,1,0,0,0,273,274,5,67,
		0,0,274,275,5,79,0,0,275,276,5,78,0,0,276,277,5,68,0,0,277,278,5,73,0,
		0,278,279,5,84,0,0,279,280,5,73,0,0,280,281,5,79,0,0,281,282,5,78,0,0,
		282,66,1,0,0,0,283,284,5,84,0,0,284,285,5,82,0,0,285,286,5,73,0,0,286,
		287,5,71,0,0,287,288,5,71,0,0,288,289,5,69,0,0,289,290,5,82,0,0,290,291,
		5,95,0,0,291,292,5,84,0,0,292,293,5,73,0,0,293,294,5,77,0,0,294,295,5,
		69,0,0,295,68,1,0,0,0,296,297,5,84,0,0,297,298,5,82,0,0,298,299,5,65,0,
		0,299,300,5,78,0,0,300,301,5,83,0,0,301,302,5,95,0,0,302,303,5,84,0,0,
		303,304,5,79,0,0,304,305,5,95,0,0,305,306,5,65,0,0,306,307,5,78,0,0,307,
		308,5,89,0,0,308,70,1,0,0,0,309,310,5,83,0,0,310,311,5,84,0,0,311,312,
		5,65,0,0,312,313,5,84,0,0,313,314,5,69,0,0,314,72,1,0,0,0,315,316,5,67,
		0,0,316,317,5,79,0,0,317,318,5,68,0,0,318,319,5,69,0,0,319,74,1,0,0,0,
		320,321,5,66,0,0,321,322,5,84,0,0,322,323,5,82,0,0,323,324,5,69,0,0,324,
		325,5,69,0,0,325,76,1,0,0,0,326,327,5,64,0,0,327,78,1,0,0,0,328,329,5,
		35,0,0,329,80,1,0,0,0,330,331,5,61,0,0,331,82,1,0,0,0,332,333,5,43,0,0,
		333,84,1,0,0,0,334,335,5,45,0,0,335,86,1,0,0,0,336,337,5,42,0,0,337,88,
		1,0,0,0,338,339,5,47,0,0,339,90,1,0,0,0,340,341,5,105,0,0,341,342,5,102,
		0,0,342,92,1,0,0,0,343,344,5,101,0,0,344,345,5,108,0,0,345,346,5,105,0,
		0,346,347,5,102,0,0,347,94,1,0,0,0,348,349,5,101,0,0,349,350,5,108,0,0,
		350,351,5,115,0,0,351,352,5,101,0,0,352,96,1,0,0,0,353,354,5,105,0,0,354,
		355,5,110,0,0,355,98,1,0,0,0,356,357,5,119,0,0,357,358,5,104,0,0,358,359,
		5,105,0,0,359,360,5,108,0,0,360,361,5,101,0,0,361,100,1,0,0,0,362,363,
		5,102,0,0,363,364,5,111,0,0,364,365,5,114,0,0,365,102,1,0,0,0,366,367,
		5,123,0,0,367,104,1,0,0,0,368,369,5,125,0,0,369,106,1,0,0,0,370,371,5,
		91,0,0,371,108,1,0,0,0,372,373,5,93,0,0,373,110,1,0,0,0,374,375,5,40,0,
		0,375,112,1,0,0,0,376,377,5,41,0,0,377,114,1,0,0,0,378,383,3,117,58,0,
		379,382,3,117,58,0,380,382,7,0,0,0,381,379,1,0,0,0,381,380,1,0,0,0,382,
		385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,116,1,0,0,0,385,383,1,
		0,0,0,386,387,7,1,0,0,387,118,1,0,0,0,388,390,7,2,0,0,389,388,1,0,0,0,
		390,391,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,120,1,0,0,0,393,394,
		3,119,59,0,394,395,5,46,0,0,395,396,3,119,59,0,396,122,1,0,0,0,397,399,
		7,3,0,0,398,397,1,0,0,0,399,400,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,
		0,401,402,1,0,0,0,402,403,6,61,0,0,403,124,1,0,0,0,404,405,5,39,0,0,405,
		406,9,0,0,0,406,407,5,39,0,0,407,126,1,0,0,0,408,412,5,34,0,0,409,411,
		8,4,0,0,410,409,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,
		0,413,415,1,0,0,0,414,412,1,0,0,0,415,416,5,34,0,0,416,128,1,0,0,0,417,
		418,5,47,0,0,418,419,5,47,0,0,419,423,1,0,0,0,420,422,9,0,0,0,421,420,
		1,0,0,0,422,425,1,0,0,0,423,424,1,0,0,0,423,421,1,0,0,0,424,426,1,0,0,
		0,425,423,1,0,0,0,426,427,5,10,0,0,427,428,1,0,0,0,428,429,6,64,0,0,429,
		130,1,0,0,0,430,431,5,47,0,0,431,432,5,42,0,0,432,436,1,0,0,0,433,435,
		9,0,0,0,434,433,1,0,0,0,435,438,1,0,0,0,436,437,1,0,0,0,436,434,1,0,0,
		0,437,439,1,0,0,0,438,436,1,0,0,0,439,440,5,42,0,0,440,441,5,47,0,0,441,
		442,1,0,0,0,442,443,6,65,0,0,443,132,1,0,0,0,444,445,5,35,0,0,445,446,
		5,35,0,0,446,450,1,0,0,0,447,449,9,0,0,0,448,447,1,0,0,0,449,452,1,0,0,
		0,450,451,1,0,0,0,450,448,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,
		454,5,10,0,0,454,455,1,0,0,0,455,456,6,66,1,0,456,134,1,0,0,0,10,0,189,
		381,383,391,400,412,423,436,450,2,6,0,0,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
