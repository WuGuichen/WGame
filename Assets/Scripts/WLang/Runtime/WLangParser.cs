//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/UnityProjects/WGame/Client/Assets/Scripts/WLang/Runtime/WLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class WLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		BOOLEAN=18, NULL=19, PASS=20, RETURN=21, IMPORT=22, DEFINE=23, CACHE_DEFINE=24, 
		WAIT=25, DO=26, AND=27, OR=28, WAITTIME=29, SELECTOR=30, SEQUENCE=31, 
		TRIGGER=32, CONDITION=33, TRIGGER_TIME=34, TRANS_TO_ANY=35, STATE=36, 
		CODE=37, BTREE=38, DECORATOR=39, AT=40, SHARP=41, OP_EQUAL=42, OP_ADD=43, 
		OP_SUB=44, OP_MUL=45, OP_DIV=46, IF=47, ELSEIF=48, ELSE=49, IN=50, WHILE=51, 
		FOR=52, OPENBRACE=53, CLOSEBRACE=54, OPENBRACK=55, CLOSEBRACK=56, OPENPAREN=57, 
		CLOSEPAREN=58, ID=59, INT=60, FLOAT=61, WS=62, CHAR=63, STRING=64, SLCOMMENT=65, 
		COMMNET=66, TITLE=67;
	public const int
		RULE_file = 0, RULE_fsmBuilder = 1, RULE_fileCode = 2, RULE_fsmBlock = 3, 
		RULE_fsmContent = 4, RULE_parametersMethodRef = 5, RULE_fsmTransition = 6, 
		RULE_fsmTrigger = 7, RULE_fsmCondition = 8, RULE_fsmTriggerTime = 9, RULE_bTreeBuilder = 10, 
		RULE_treeBlock = 11, RULE_treeContent = 12, RULE_numParam = 13, RULE_parameters = 14, 
		RULE_parametersDef = 15, RULE_expr = 16, RULE_exprRight = 17, RULE_exprLambda = 18, 
		RULE_exprMethod = 19, RULE_exprID = 20, RULE_exprMethodRef = 21, RULE_exprList = 22, 
		RULE_exprInt = 23, RULE_primary = 24, RULE_statement = 25, RULE_waitStatement = 26, 
		RULE_ifStatement = 27, RULE_ifStat = 28, RULE_elseIfStat = 29, RULE_elseStat = 30, 
		RULE_whileStatement = 31, RULE_forStatement = 32, RULE_block = 33, RULE_point = 34;
	public static readonly string[] ruleNames = {
		"file", "fsmBuilder", "fileCode", "fsmBlock", "fsmContent", "parametersMethodRef", 
		"fsmTransition", "fsmTrigger", "fsmCondition", "fsmTriggerTime", "bTreeBuilder", 
		"treeBlock", "treeContent", "numParam", "parameters", "parametersDef", 
		"expr", "exprRight", "exprLambda", "exprMethod", "exprID", "exprMethodRef", 
		"exprList", "exprInt", "primary", "statement", "waitStatement", "ifStatement", 
		"ifStat", "elseIfStat", "elseStat", "whileStatement", "forStatement", 
		"block", "point"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "'<-'", "':'", "','", "'!'", "'*='", "'/='", "'+='", "'-='", 
		"'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'=>'", "'.'", null, "'nil'", 
		"'pass'", "'return'", "'import'", "'def'", "'cDef'", "'WAIT'", "'DO'", 
		"'and'", "'or'", "'WAITTIME'", "'SELECTOR'", "'SEQUENCE'", "'TRIGGER'", 
		"'CONDITION'", "'TRIGGER_TIME'", "'TRANS_TO_ANY'", "'STATE'", "'CODE'", 
		"'BTREE'", "'DECORATOR'", "'@'", "'#'", "'='", "'+'", "'-'", "'*'", "'/'", 
		"'if'", "'elif'", "'else'", "'in'", "'while'", "'for'", "'{'", "'}'", 
		"'['", "']'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "BOOLEAN", "NULL", "PASS", "RETURN", 
		"IMPORT", "DEFINE", "CACHE_DEFINE", "WAIT", "DO", "AND", "OR", "WAITTIME", 
		"SELECTOR", "SEQUENCE", "TRIGGER", "CONDITION", "TRIGGER_TIME", "TRANS_TO_ANY", 
		"STATE", "CODE", "BTREE", "DECORATOR", "AT", "SHARP", "OP_EQUAL", "OP_ADD", 
		"OP_SUB", "OP_MUL", "OP_DIV", "IF", "ELSEIF", "ELSE", "IN", "WHILE", "FOR", 
		"OPENBRACE", "CLOSEBRACE", "OPENBRACK", "CLOSEBRACK", "OPENPAREN", "CLOSEPAREN", 
		"ID", "INT", "FLOAT", "WS", "CHAR", "STRING", "SLCOMMENT", "COMMNET", 
		"TITLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext[] ifStatement() {
			return GetRuleContexts<IfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement(int i) {
			return GetRuleContext<IfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext[] whileStatement() {
			return GetRuleContexts<WhileStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement(int i) {
			return GetRuleContext<WhileStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext[] forStatement() {
			return GetRuleContexts<ForStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement(int i) {
			return GetRuleContext<ForStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext[] waitStatement() {
			return GetRuleContexts<WaitStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement(int i) {
			return GetRuleContext<WaitStatementContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 995511606045040641L) != 0)) {
				{
				State = 75;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
				case BOOLEAN:
				case NULL:
				case PASS:
				case RETURN:
				case IMPORT:
				case DEFINE:
				case AT:
				case OP_SUB:
				case OPENPAREN:
				case ID:
				case INT:
				case FLOAT:
				case CHAR:
				case STRING:
					{
					State = 70;
					statement();
					}
					break;
				case IF:
					{
					State = 71;
					ifStatement();
					}
					break;
				case WHILE:
					{
					State = 72;
					whileStatement();
					}
					break;
				case FOR:
					{
					State = 73;
					forStatement();
					}
					break;
				case WAIT:
					{
					State = 74;
					waitStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FsmBuilderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileCodeContext fileCode() {
			return GetRuleContext<FileCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FsmBlockContext[] fsmBlock() {
			return GetRuleContexts<FsmBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FsmBlockContext fsmBlock(int i) {
			return GetRuleContext<FsmBlockContext>(i);
		}
		public FsmBuilderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsmBuilder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsmBuilder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FsmBuilderContext fsmBuilder() {
		FsmBuilderContext _localctx = new FsmBuilderContext(Context, State);
		EnterRule(_localctx, 2, RULE_fsmBuilder);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CODE) {
				{
				State = 80;
				fileCode();
				}
			}

			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 98784247814L) != 0)) {
				{
				{
				State = 83;
				fsmBlock();
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(WLangParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRACE() { return GetToken(WLangParser.OPENBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEBRACE() { return GetToken(WLangParser.CLOSEBRACE, 0); }
		public FileCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileCodeContext fileCode() {
		FileCodeContext _localctx = new FileCodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_fileCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(CODE);
			State = 90;
			Match(OPENBRACE);
			State = 91;
			file();
			State = 92;
			Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FsmBlockContext : ParserRuleContext {
		public FsmBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsmBlock; } }
	 
		public FsmBlockContext() { }
		public virtual void CopyFrom(FsmBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FSMConditionContext : FsmBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(WLangParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRACE() { return GetToken(WLangParser.OPENBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEBRACE() { return GetToken(WLangParser.CLOSEBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FsmConditionContext[] fsmCondition() {
			return GetRuleContexts<FsmConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FsmConditionContext fsmCondition(int i) {
			return GetRuleContext<FsmConditionContext>(i);
		}
		public FSMConditionContext(FsmBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFSMCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FSMTriggerContext : FsmBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(WLangParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRACE() { return GetToken(WLangParser.OPENBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEBRACE() { return GetToken(WLangParser.CLOSEBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FsmTriggerContext[] fsmTrigger() {
			return GetRuleContexts<FsmTriggerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FsmTriggerContext fsmTrigger(int i) {
			return GetRuleContext<FsmTriggerContext>(i);
		}
		public FSMTriggerContext(FsmBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFSMTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FSMStateContext : FsmBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATE() { return GetToken(WLangParser.STATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRACE() { return GetToken(WLangParser.OPENBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEBRACE() { return GetToken(WLangParser.CLOSEBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FsmContentContext[] fsmContent() {
			return GetRuleContexts<FsmContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FsmContentContext fsmContent(int i) {
			return GetRuleContext<FsmContentContext>(i);
		}
		public FSMStateContext(FsmBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFSMState(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FSMStartContext : FsmBlockContext {
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		public FSMStartContext(FsmBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFSMStart(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FSMTriggerTimeContext : FsmBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_TIME() { return GetToken(WLangParser.TRIGGER_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRACE() { return GetToken(WLangParser.OPENBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEBRACE() { return GetToken(WLangParser.CLOSEBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FsmTriggerTimeContext[] fsmTriggerTime() {
			return GetRuleContexts<FsmTriggerTimeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FsmTriggerTimeContext fsmTriggerTime(int i) {
			return GetRuleContext<FsmTriggerTimeContext>(i);
		}
		public FSMTriggerTimeContext(FsmBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFSMTriggerTime(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FSMExitContext : FsmBlockContext {
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		public FSMExitContext(FsmBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFSMExit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FsmBlockContext fsmBlock() {
		FsmBlockContext _localctx = new FsmBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_fsmBlock);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STATE:
				_localctx = new FSMStateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				Match(STATE);
				State = 95;
				Match(OPENBRACE);
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 96;
					fsmContent();
					}
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 102;
				Match(CLOSEBRACE);
				}
				break;
			case TRIGGER:
				_localctx = new FSMTriggerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				Match(TRIGGER);
				State = 104;
				Match(OPENBRACE);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 105;
					fsmTrigger();
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 111;
				Match(CLOSEBRACE);
				}
				break;
			case CONDITION:
				_localctx = new FSMConditionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 112;
				Match(CONDITION);
				State = 113;
				Match(OPENBRACE);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 114;
					fsmCondition();
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 120;
				Match(CLOSEBRACE);
				}
				break;
			case TRIGGER_TIME:
				_localctx = new FSMTriggerTimeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				Match(TRIGGER_TIME);
				State = 122;
				Match(OPENBRACE);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 123;
					fsmTriggerTime();
					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 129;
				Match(CLOSEBRACE);
				}
				break;
			case T__0:
				_localctx = new FSMStartContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 130;
				Match(T__0);
				State = 131;
				((FSMStartContext)_localctx).s = Match(ID);
				}
				break;
			case T__1:
				_localctx = new FSMExitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 132;
				Match(T__1);
				State = 133;
				((FSMExitContext)_localctx).s = Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FsmContentContext : ParserRuleContext {
		public IToken i;
		public ParametersMethodRefContext p;
		public IToken f;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(WLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(WLangParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersMethodRefContext parametersMethodRef() {
			return GetRuleContext<ParametersMethodRefContext>(0);
		}
		public FsmContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsmContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsmContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FsmContentContext fsmContent() {
		FsmContentContext _localctx = new FsmContentContext(Context, State);
		EnterRule(_localctx, 8, RULE_fsmContent);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				_localctx.i = Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				_localctx.i = Match(ID);
				State = 138;
				Match(T__2);
				State = 139;
				_localctx.p = parametersMethodRef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 140;
				_localctx.i = Match(ID);
				State = 141;
				Match(T__0);
				State = 142;
				_localctx.f = Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersMethodRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprMethodRefContext[] exprMethodRef() {
			return GetRuleContexts<ExprMethodRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprMethodRefContext exprMethodRef(int i) {
			return GetRuleContext<ExprMethodRefContext>(i);
		}
		public ParametersMethodRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersMethodRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersMethodRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersMethodRefContext parametersMethodRef() {
		ParametersMethodRefContext _localctx = new ParametersMethodRefContext(Context, State);
		EnterRule(_localctx, 10, RULE_parametersMethodRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			exprMethodRef();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 146;
				Match(T__3);
				State = 147;
				exprMethodRef();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FsmTransitionContext : ParserRuleContext {
		public IToken f;
		public IToken t;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(WLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(WLangParser.ID, i);
		}
		public FsmTransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsmTransition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsmTransition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FsmTransitionContext fsmTransition() {
		FsmTransitionContext _localctx = new FsmTransitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_fsmTransition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_localctx.f = Match(ID);
			State = 154;
			Match(T__0);
			State = 155;
			_localctx.t = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FsmTriggerContext : ParserRuleContext {
		public FsmTransitionContext t;
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public FsmTransitionContext fsmTransition() {
			return GetRuleContext<FsmTransitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprMethodRefContext exprMethodRef() {
			return GetRuleContext<ExprMethodRefContext>(0);
		}
		public FsmTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsmTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsmTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FsmTriggerContext fsmTrigger() {
		FsmTriggerContext _localctx = new FsmTriggerContext(Context, State);
		EnterRule(_localctx, 14, RULE_fsmTrigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_localctx.t = fsmTransition();
			State = 158;
			Match(T__2);
			State = 159;
			_localctx.i = Match(ID);
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 160;
				exprMethodRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FsmConditionContext : ParserRuleContext {
		public FsmTransitionContext t;
		public ExprMethodRefContext c;
		[System.Diagnostics.DebuggerNonUserCode] public FsmTransitionContext fsmTransition() {
			return GetRuleContext<FsmTransitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprMethodRefContext exprMethodRef() {
			return GetRuleContext<ExprMethodRefContext>(0);
		}
		public FsmConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsmCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsmCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FsmConditionContext fsmCondition() {
		FsmConditionContext _localctx = new FsmConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_fsmCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_localctx.t = fsmTransition();
			State = 164;
			Match(T__2);
			State = 165;
			_localctx.c = exprMethodRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FsmTriggerTimeContext : ParserRuleContext {
		public FsmTransitionContext t;
		public NumParamContext n;
		[System.Diagnostics.DebuggerNonUserCode] public FsmTransitionContext fsmTransition() {
			return GetRuleContext<FsmTransitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumParamContext numParam() {
			return GetRuleContext<NumParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprMethodRefContext exprMethodRef() {
			return GetRuleContext<ExprMethodRefContext>(0);
		}
		public FsmTriggerTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsmTriggerTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsmTriggerTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FsmTriggerTimeContext fsmTriggerTime() {
		FsmTriggerTimeContext _localctx = new FsmTriggerTimeContext(Context, State);
		EnterRule(_localctx, 18, RULE_fsmTriggerTime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_localctx.t = fsmTransition();
			State = 168;
			Match(T__2);
			State = 169;
			_localctx.n = numParam();
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 170;
				exprMethodRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BTreeBuilderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileCodeContext fileCode() {
			return GetRuleContext<FileCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeBlockContext[] treeBlock() {
			return GetRuleContexts<TreeBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeBlockContext treeBlock(int i) {
			return GetRuleContext<TreeBlockContext>(i);
		}
		public BTreeBuilderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bTreeBuilder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBTreeBuilder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BTreeBuilderContext bTreeBuilder() {
		BTreeBuilderContext _localctx = new BTreeBuilderContext(Context, State);
		EnterRule(_localctx, 20, RULE_bTreeBuilder);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CODE) {
				{
				State = 173;
				fileCode();
				}
			}

			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 176;
				treeBlock();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3858759680L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeBlockContext : ParserRuleContext {
		public TreeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeBlock; } }
	 
		public TreeBlockContext() { }
		public virtual void CopyFrom(TreeBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TreeDoContext : TreeBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(WLangParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TreeDoContext(TreeBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTreeDo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TreeWaitTimeContext : TreeBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAITTIME() { return GetToken(WLangParser.WAITTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumParamContext numParam() {
			return GetRuleContext<NumParamContext>(0);
		}
		public TreeWaitTimeContext(TreeBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTreeWaitTime(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TreeSelectorContext : TreeBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTOR() { return GetToken(WLangParser.SELECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TreeContentContext treeContent() {
			return GetRuleContext<TreeContentContext>(0);
		}
		public TreeSelectorContext(TreeBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTreeSelector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TreeSequenceContext : TreeBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(WLangParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TreeContentContext treeContent() {
			return GetRuleContext<TreeContentContext>(0);
		}
		public TreeSequenceContext(TreeBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTreeSequence(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TreeWaitContext : TreeBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(WLangParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumParamContext numParam() {
			return GetRuleContext<NumParamContext>(0);
		}
		public TreeWaitContext(TreeBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTreeWait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TreeBlockContext treeBlock() {
		TreeBlockContext _localctx = new TreeBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_treeBlock);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECTOR:
				_localctx = new TreeSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				Match(SELECTOR);
				State = 182;
				treeContent();
				}
				break;
			case SEQUENCE:
				_localctx = new TreeSequenceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				Match(SEQUENCE);
				State = 184;
				treeContent();
				}
				break;
			case DO:
				_localctx = new TreeDoContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				Match(DO);
				State = 186;
				block();
				}
				break;
			case WAITTIME:
				_localctx = new TreeWaitTimeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 187;
				Match(WAITTIME);
				State = 188;
				numParam();
				}
				break;
			case WAIT:
				_localctx = new TreeWaitContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 189;
				Match(WAIT);
				State = 190;
				numParam();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRACE() { return GetToken(WLangParser.OPENBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEBRACE() { return GetToken(WLangParser.CLOSEBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumParamContext numParam() {
			return GetRuleContext<NumParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeBlockContext[] treeBlock() {
			return GetRuleContexts<TreeBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeBlockContext treeBlock(int i) {
			return GetRuleContext<TreeBlockContext>(i);
		}
		public TreeContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTreeContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TreeContentContext treeContent() {
		TreeContentContext _localctx = new TreeContentContext(Context, State);
		EnterRule(_localctx, 24, RULE_treeContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4035225266123964416L) != 0)) {
				{
				State = 193;
				numParam();
				}
			}

			State = 196;
			Match(OPENBRACE);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 197;
				treeBlock();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3858759680L) != 0) );
			State = 202;
			Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumParamContext : ParserRuleContext {
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(WLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(WLangParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		public NumParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumParamContext numParam() {
		NumParamContext _localctx = new NumParamContext(Context, State);
		EnterRule(_localctx, 26, RULE_numParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_localctx.s = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4035225266123964416L) != 0)) ) {
				_localctx.s = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext[] exprRight() {
			return GetRuleContexts<ExprRightContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext exprRight(int i) {
			return GetRuleContext<ExprRightContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprIDContext[] exprID() {
			return GetRuleContexts<ExprIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprIDContext exprID(int i) {
			return GetRuleContext<ExprIDContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 206;
				exprRight();
				}
				break;
			case 2:
				{
				State = 207;
				exprID();
				}
				break;
			}
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 210;
				Match(T__3);
				State = 213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 211;
					exprRight();
					}
					break;
				case 2:
					{
					State = 212;
					exprID();
					}
					break;
				}
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersDefContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(WLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(WLangParser.ID, i);
		}
		public ParametersDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersDefContext parametersDef() {
		ParametersDefContext _localctx = new ParametersDefContext(Context, State);
		EnterRule(_localctx, 30, RULE_parametersDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_localctx.i = Match(ID);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 221;
				Match(T__3);
				State = 222;
				Match(ID);
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPrimaryContext : ExprContext {
		public PrimaryContext o;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExprPrimaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBinaryContext : ExprContext {
		public IToken o;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext exprRight() {
			return GetRuleContext<ExprRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(WLangParser.OP_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(WLangParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(WLangParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(WLangParser.OP_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(WLangParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(WLangParser.OR, 0); }
		public ExprBinaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprGroupContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPAREN() { return GetToken(WLangParser.OPENPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPAREN() { return GetToken(WLangParser.CLOSEPAREN, 0); }
		public ExprGroupContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprPointContext : ExprContext {
		public IToken l;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointContext[] point() {
			return GetRuleContexts<PointContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointContext point(int i) {
			return GetRuleContext<PointContext>(i);
		}
		public ExprPointContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPoint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprUnaryContext : ExprContext {
		public IToken o;
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext exprRight() {
			return GetRuleContext<ExprRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(WLangParser.OP_SUB, 0); }
		public ExprUnaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				_localctx = new ExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 229;
				((ExprUnaryContext)_localctx).o = Match(OP_SUB);
				State = 230;
				exprRight();
				}
				break;
			case 2:
				{
				_localctx = new ExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 231;
				((ExprUnaryContext)_localctx).o = Match(T__4);
				State = 232;
				exprRight();
				}
				break;
			case 3:
				{
				_localctx = new ExprPointContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 233;
				((ExprPointContext)_localctx).l = Match(ID);
				State = 235;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 234;
						point();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 237;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 4:
				{
				_localctx = new ExprPrimaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 239;
				((ExprPrimaryContext)_localctx).o = primary();
				}
				break;
			case 5:
				{
				_localctx = new ExprGroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 240;
				Match(OPENPAREN);
				State = 241;
				expr(0);
				State = 242;
				Match(CLOSEPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 266;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 264;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new ExprBinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 246;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 247;
						((ExprBinaryContext)_localctx).o = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_MUL || _la==OP_DIV) ) {
							((ExprBinaryContext)_localctx).o = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 248;
						exprRight();
						}
						break;
					case 2:
						{
						_localctx = new ExprBinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 249;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 250;
						((ExprBinaryContext)_localctx).o = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__5 || _la==T__6) ) {
							((ExprBinaryContext)_localctx).o = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 251;
						exprRight();
						}
						break;
					case 3:
						{
						_localctx = new ExprBinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 252;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 253;
						((ExprBinaryContext)_localctx).o = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_ADD || _la==OP_SUB) ) {
							((ExprBinaryContext)_localctx).o = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 254;
						exprRight();
						}
						break;
					case 4:
						{
						_localctx = new ExprBinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 255;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 256;
						((ExprBinaryContext)_localctx).o = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__7 || _la==T__8) ) {
							((ExprBinaryContext)_localctx).o = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 257;
						exprRight();
						}
						break;
					case 5:
						{
						_localctx = new ExprBinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 258;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 259;
						((ExprBinaryContext)_localctx).o = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 64512L) != 0)) ) {
							((ExprBinaryContext)_localctx).o = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 260;
						exprRight();
						}
						break;
					case 6:
						{
						_localctx = new ExprBinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 261;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 262;
						((ExprBinaryContext)_localctx).o = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							((ExprBinaryContext)_localctx).o = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 263;
						exprRight();
						}
						break;
					}
					} 
				}
				State = 268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprRightContext : ParserRuleContext {
		public ExprRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprRight; } }
	 
		public ExprRightContext() { }
		public virtual void CopyFrom(ExprRightContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprCommandContext : ExprRightContext {
		public ExprMethodContext m;
		[System.Diagnostics.DebuggerNonUserCode] public ExprMethodContext exprMethod() {
			return GetRuleContext<ExprMethodContext>(0);
		}
		public ExprCommandContext(ExprRightContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTableContext : ExprRightContext {
		public ExprListContext l;
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ExprTableContext(ExprRightContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprExprContext : ExprRightContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprExprContext(ExprRightContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLambdaRefContext : ExprRightContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprLambdaContext exprLambda() {
			return GetRuleContext<ExprLambdaContext>(0);
		}
		public ExprLambdaRefContext(ExprRightContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLambdaRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprRightContext exprRight() {
		ExprRightContext _localctx = new ExprRightContext(Context, State);
		EnterRule(_localctx, 34, RULE_exprRight);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				_localctx = new ExprExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				expr(0);
				}
				break;
			case 2:
				_localctx = new ExprTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 270;
				((ExprTableContext)_localctx).l = exprList();
				}
				break;
			case 3:
				_localctx = new ExprLambdaRefContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 271;
				exprLambda();
				}
				break;
			case 4:
				_localctx = new ExprCommandContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 272;
				((ExprCommandContext)_localctx).m = exprMethod();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprLambdaContext : ParserRuleContext {
		public BlockContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPAREN() { return GetToken(WLangParser.OPENPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPAREN() { return GetToken(WLangParser.CLOSEPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersDefContext parametersDef() {
			return GetRuleContext<ParametersDefContext>(0);
		}
		public ExprLambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprLambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprLambdaContext exprLambda() {
		ExprLambdaContext _localctx = new ExprLambdaContext(Context, State);
		EnterRule(_localctx, 36, RULE_exprLambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(OPENPAREN);
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 276;
				parametersDef();
				}
			}

			State = 279;
			Match(CLOSEPAREN);
			State = 280;
			Match(T__15);
			State = 281;
			_localctx.b = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprMethodContext : ParserRuleContext {
		public ExprIDContext e;
		public IToken d;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPAREN() { return GetToken(WLangParser.OPENPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPAREN() { return GetToken(WLangParser.CLOSEPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprIDContext exprID() {
			return GetRuleContext<ExprIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ExprMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprMethodContext exprMethod() {
		ExprMethodContext _localctx = new ExprMethodContext(Context, State);
		EnterRule(_localctx, 38, RULE_exprMethod);
		int _la;
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				_localctx.e = exprID();
				State = 284;
				Match(T__2);
				State = 285;
				_localctx.d = Match(ID);
				State = 286;
				Match(OPENPAREN);
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 996422001671299073L) != 0)) {
					{
					State = 287;
					parameters();
					}
				}

				State = 290;
				Match(CLOSEPAREN);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				_localctx.d = Match(ID);
				State = 293;
				Match(OPENPAREN);
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 996422001671299073L) != 0)) {
					{
					State = 294;
					parameters();
					}
				}

				State = 297;
				Match(CLOSEPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprIDContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(WLangParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		public ExprIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprIDContext exprID() {
		ExprIDContext _localctx = new ExprIDContext(Context, State);
		EnterRule(_localctx, 40, RULE_exprID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(AT);
			State = 301;
			_localctx.i = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprMethodRefContext : ParserRuleContext {
		public ExprMethodRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprMethodRef; } }
	 
		public ExprMethodRefContext() { }
		public virtual void CopyFrom(ExprMethodRefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprMethodRefNullContext : ExprMethodRefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(WLangParser.NULL, 0); }
		public ExprMethodRefNullContext(ExprMethodRefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMethodRefNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMethodRefIDContext : ExprMethodRefContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		public ExprMethodRefIDContext(ExprMethodRefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMethodRefID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMethodRefLambdaContext : ExprMethodRefContext {
		public ExprLambdaContext l;
		[System.Diagnostics.DebuggerNonUserCode] public ExprLambdaContext exprLambda() {
			return GetRuleContext<ExprLambdaContext>(0);
		}
		public ExprMethodRefLambdaContext(ExprMethodRefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMethodRefLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprMethodRefContext exprMethodRef() {
		ExprMethodRefContext _localctx = new ExprMethodRefContext(Context, State);
		EnterRule(_localctx, 42, RULE_exprMethodRef);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new ExprMethodRefIDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 303;
				((ExprMethodRefIDContext)_localctx).i = Match(ID);
				}
				break;
			case NULL:
				_localctx = new ExprMethodRefNullContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 304;
				Match(NULL);
				}
				break;
			case OPENPAREN:
				_localctx = new ExprMethodRefLambdaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 305;
				((ExprMethodRefLambdaContext)_localctx).l = exprLambda();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRACK() { return GetToken(WLangParser.OPENBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEBRACK() { return GetToken(WLangParser.CLOSEBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext[] exprRight() {
			return GetRuleContexts<ExprRightContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext exprRight(int i) {
			return GetRuleContext<ExprRightContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprIntContext[] exprInt() {
			return GetRuleContexts<ExprIntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprIntContext exprInt(int i) {
			return GetRuleContext<ExprIntContext>(i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 44, RULE_exprList);
		int _la;
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENBRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308;
				Match(OPENBRACK);
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 996422001671299073L) != 0)) {
					{
					State = 309;
					exprRight();
					}
				}

				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 312;
					Match(T__3);
					State = 313;
					exprRight();
					}
					}
					State = 318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 319;
				Match(CLOSEBRACK);
				}
				break;
			case ID:
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320;
				exprInt();
				State = 321;
				Match(T__2);
				State = 322;
				exprInt();
				State = 325;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 323;
					Match(T__2);
					State = 324;
					exprInt();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprIntContext : ParserRuleContext {
		public ExprIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprInt; } }
	 
		public ExprIntContext() { }
		public virtual void CopyFrom(ExprIntContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprIntINTContext : ExprIntContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(WLangParser.INT, 0); }
		public ExprIntINTContext(ExprIntContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIntINT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIntIDContext : ExprIntContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		public ExprIntIDContext(ExprIntContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIntID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprIntContext exprInt() {
		ExprIntContext _localctx = new ExprIntContext(Context, State);
		EnterRule(_localctx, 46, RULE_exprInt);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new ExprIntIDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				((ExprIntIDContext)_localctx).i = Match(ID);
				}
				break;
			case INT:
				_localctx = new ExprIntINTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				((ExprIntINTContext)_localctx).i = Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryCHARContext : PrimaryContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(WLangParser.CHAR, 0); }
		public PrimaryCHARContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryCHAR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryFLOATContext : PrimaryContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(WLangParser.FLOAT, 0); }
		public PrimaryFLOATContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryFLOAT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryBOOLContext : PrimaryContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(WLangParser.BOOLEAN, 0); }
		public PrimaryBOOLContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryBOOL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryINTContext : PrimaryContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(WLangParser.INT, 0); }
		public PrimaryINTContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryINT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryNULLContext : PrimaryContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(WLangParser.NULL, 0); }
		public PrimaryNULLContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNULL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimarySTRINGContext : PrimaryContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(WLangParser.STRING, 0); }
		public PrimarySTRINGContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimarySTRING(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryIDContext : PrimaryContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		public PrimaryIDContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 48, RULE_primary);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new PrimaryIDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				((PrimaryIDContext)_localctx).i = Match(ID);
				}
				break;
			case INT:
				_localctx = new PrimaryINTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				((PrimaryINTContext)_localctx).i = Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new PrimaryFLOATContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 335;
				((PrimaryFLOATContext)_localctx).i = Match(FLOAT);
				}
				break;
			case CHAR:
				_localctx = new PrimaryCHARContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 336;
				((PrimaryCHARContext)_localctx).i = Match(CHAR);
				}
				break;
			case STRING:
				_localctx = new PrimarySTRINGContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 337;
				((PrimarySTRINGContext)_localctx).i = Match(STRING);
				}
				break;
			case BOOLEAN:
				_localctx = new PrimaryBOOLContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 338;
				((PrimaryBOOLContext)_localctx).i = Match(BOOLEAN);
				}
				break;
			case NULL:
				_localctx = new PrimaryNULLContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 339;
				((PrimaryNULLContext)_localctx).i = Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatImportContext : StatementContext {
		public IToken f;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(WLangParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(WLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(WLangParser.ID, i);
		}
		public StatImportContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatImport(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatMethodContext : StatementContext {
		public IToken f;
		public ParametersDefContext p;
		public BlockContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(WLangParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPAREN() { return GetToken(WLangParser.OPENPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPAREN() { return GetToken(WLangParser.CLOSEPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersDefContext parametersDef() {
			return GetRuleContext<ParametersDefContext>(0);
		}
		public StatMethodContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatCommandContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprMethodContext exprMethod() {
			return GetRuleContext<ExprMethodContext>(0);
		}
		public StatCommandContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatPassContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(WLangParser.PASS, 0); }
		public StatPassContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatPass(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatReturnContext : StatementContext {
		public ExprRightContext r;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(WLangParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext exprRight() {
			return GetRuleContext<ExprRightContext>(0);
		}
		public StatReturnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatAssignContext : StatementContext {
		public ExprContext k;
		public ExprRightContext r;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(WLangParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext exprRight() {
			return GetRuleContext<ExprRightContext>(0);
		}
		public StatAssignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_statement);
		int _la;
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				_localctx = new StatAssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 342;
				((StatAssignContext)_localctx).k = expr(0);
				State = 343;
				Match(OP_EQUAL);
				State = 344;
				((StatAssignContext)_localctx).r = exprRight();
				}
				break;
			case 2:
				_localctx = new StatPassContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 346;
				Match(PASS);
				}
				break;
			case 3:
				_localctx = new StatReturnContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 347;
				Match(RETURN);
				State = 348;
				((StatReturnContext)_localctx).r = exprRight();
				}
				break;
			case 4:
				_localctx = new StatImportContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 349;
				Match(IMPORT);
				State = 350;
				((StatImportContext)_localctx).f = Match(ID);
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 351;
					Match(T__16);
					State = 352;
					Match(ID);
					}
					}
					State = 357;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new StatMethodContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 358;
				Match(DEFINE);
				State = 359;
				((StatMethodContext)_localctx).f = Match(ID);
				State = 360;
				Match(OPENPAREN);
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 361;
					((StatMethodContext)_localctx).p = parametersDef();
					}
				}

				State = 364;
				Match(CLOSEPAREN);
				State = 365;
				((StatMethodContext)_localctx).b = block();
				}
				break;
			case 6:
				_localctx = new StatCommandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 366;
				exprMethod();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		public IToken t;
		public BlockContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(WLangParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(WLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(WLangParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WLangParser.ID, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_waitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(WAIT);
			State = 370;
			_localctx.t = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4035225266123964416L) != 0)) ) {
				_localctx.t = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 371;
			_localctx.b = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatContext[] elseIfStat() {
			return GetRuleContexts<ElseIfStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatContext elseIfStat(int i) {
			return GetRuleContext<ElseIfStatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			ifStat();
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 374;
				elseIfStat();
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 380;
				elseStat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public ExprRightContext e;
		public BlockContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(WLangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext exprRight() {
			return GetRuleContext<ExprRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 56, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(IF);
			State = 384;
			_localctx.e = exprRight();
			State = 385;
			_localctx.b = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatContext : ParserRuleContext {
		public ExprRightContext e;
		public BlockContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(WLangParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext exprRight() {
			return GetRuleContext<ExprRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatContext elseIfStat() {
		ElseIfStatContext _localctx = new ElseIfStatContext(Context, State);
		EnterRule(_localctx, 58, RULE_elseIfStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(ELSEIF);
			State = 388;
			_localctx.e = exprRight();
			State = 389;
			_localctx.b = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatContext : ParserRuleContext {
		public BlockContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(WLangParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatContext elseStat() {
		ElseStatContext _localctx = new ElseStatContext(Context, State);
		EnterRule(_localctx, 60, RULE_elseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(ELSE);
			State = 392;
			_localctx.b = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExprRightContext e;
		public BlockContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(WLangParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprRightContext exprRight() {
			return GetRuleContext<ExprRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(WHILE);
			State = 395;
			_localctx.e = exprRight();
			State = 396;
			_localctx.b = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public IToken i;
		public BlockContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(WLangParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(WLangParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(WLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(WLangParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			Match(FOR);
			State = 399;
			_localctx.i = Match(ID);
			State = 400;
			Match(IN);
			State = 403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 401;
				exprList();
				}
				break;
			case 2:
				{
				State = 402;
				Match(ID);
				}
				break;
			}
			State = 405;
			_localctx.b = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public FileContext f;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENBRACE() { return GetToken(WLangParser.OPENBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEBRACE() { return GetToken(WLangParser.CLOSEBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(OPENBRACE);
			State = 408;
			_localctx.f = file();
			State = 409;
			Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARP() { return GetToken(WLangParser.SHARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprIntContext exprInt() {
			return GetRuleContext<ExprIntContext>(0);
		}
		public PointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWLangVisitor<TResult> typedVisitor = visitor as IWLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointContext point() {
		PointContext _localctx = new PointContext(Context, State);
		EnterRule(_localctx, 68, RULE_point);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(SHARP);
			State = 412;
			exprInt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,67,415,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,0,1,
		0,1,0,1,0,5,0,76,8,0,10,0,12,0,79,9,0,1,1,3,1,82,8,1,1,1,5,1,85,8,1,10,
		1,12,1,88,9,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,5,3,98,8,3,10,3,12,3,101,
		9,3,1,3,1,3,1,3,1,3,5,3,107,8,3,10,3,12,3,110,9,3,1,3,1,3,1,3,1,3,5,3,
		116,8,3,10,3,12,3,119,9,3,1,3,1,3,1,3,1,3,5,3,125,8,3,10,3,12,3,128,9,
		3,1,3,1,3,1,3,1,3,1,3,3,3,135,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,144,
		8,4,1,5,1,5,1,5,5,5,149,8,5,10,5,12,5,152,9,5,1,6,1,6,1,6,1,6,1,7,1,7,
		1,7,1,7,3,7,162,8,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,172,8,9,1,10,3,
		10,175,8,10,1,10,4,10,178,8,10,11,10,12,10,179,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,3,11,192,8,11,1,12,3,12,195,8,12,1,12,1,12,4,
		12,199,8,12,11,12,12,12,200,1,12,1,12,1,13,1,13,1,14,1,14,3,14,209,8,14,
		1,14,1,14,1,14,3,14,214,8,14,5,14,216,8,14,10,14,12,14,219,9,14,1,15,1,
		15,1,15,5,15,224,8,15,10,15,12,15,227,9,15,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,4,16,236,8,16,11,16,12,16,237,1,16,1,16,1,16,1,16,1,16,3,16,245,
		8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,5,16,265,8,16,10,16,12,16,268,9,16,1,17,1,17,
		1,17,1,17,3,17,274,8,17,1,18,1,18,3,18,278,8,18,1,18,1,18,1,18,1,18,1,
		19,1,19,1,19,1,19,1,19,3,19,289,8,19,1,19,1,19,1,19,1,19,1,19,3,19,296,
		8,19,1,19,3,19,299,8,19,1,20,1,20,1,20,1,21,1,21,1,21,3,21,307,8,21,1,
		22,1,22,3,22,311,8,22,1,22,1,22,5,22,315,8,22,10,22,12,22,318,9,22,1,22,
		1,22,1,22,1,22,1,22,1,22,3,22,326,8,22,3,22,328,8,22,1,23,1,23,3,23,332,
		8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,341,8,24,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,354,8,25,10,25,12,25,357,9,
		25,1,25,1,25,1,25,1,25,3,25,363,8,25,1,25,1,25,1,25,3,25,368,8,25,1,26,
		1,26,1,26,1,26,1,27,1,27,5,27,376,8,27,10,27,12,27,379,9,27,1,27,3,27,
		382,8,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,
		31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,3,32,404,8,32,1,32,1,32,1,33,1,33,
		1,33,1,33,1,34,1,34,1,34,1,34,0,1,32,35,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,0,
		7,1,0,59,61,1,0,45,46,1,0,6,7,1,0,43,44,1,0,8,9,1,0,10,15,1,0,27,28,453,
		0,77,1,0,0,0,2,81,1,0,0,0,4,89,1,0,0,0,6,134,1,0,0,0,8,143,1,0,0,0,10,
		145,1,0,0,0,12,153,1,0,0,0,14,157,1,0,0,0,16,163,1,0,0,0,18,167,1,0,0,
		0,20,174,1,0,0,0,22,191,1,0,0,0,24,194,1,0,0,0,26,204,1,0,0,0,28,208,1,
		0,0,0,30,220,1,0,0,0,32,244,1,0,0,0,34,273,1,0,0,0,36,275,1,0,0,0,38,298,
		1,0,0,0,40,300,1,0,0,0,42,306,1,0,0,0,44,327,1,0,0,0,46,331,1,0,0,0,48,
		340,1,0,0,0,50,367,1,0,0,0,52,369,1,0,0,0,54,373,1,0,0,0,56,383,1,0,0,
		0,58,387,1,0,0,0,60,391,1,0,0,0,62,394,1,0,0,0,64,398,1,0,0,0,66,407,1,
		0,0,0,68,411,1,0,0,0,70,76,3,50,25,0,71,76,3,54,27,0,72,76,3,62,31,0,73,
		76,3,64,32,0,74,76,3,52,26,0,75,70,1,0,0,0,75,71,1,0,0,0,75,72,1,0,0,0,
		75,73,1,0,0,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,
		78,1,1,0,0,0,79,77,1,0,0,0,80,82,3,4,2,0,81,80,1,0,0,0,81,82,1,0,0,0,82,
		86,1,0,0,0,83,85,3,6,3,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,
		87,1,0,0,0,87,3,1,0,0,0,88,86,1,0,0,0,89,90,5,37,0,0,90,91,5,53,0,0,91,
		92,3,0,0,0,92,93,5,54,0,0,93,5,1,0,0,0,94,95,5,36,0,0,95,99,5,53,0,0,96,
		98,3,8,4,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,
		102,1,0,0,0,101,99,1,0,0,0,102,135,5,54,0,0,103,104,5,32,0,0,104,108,5,
		53,0,0,105,107,3,14,7,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,
		0,108,109,1,0,0,0,109,111,1,0,0,0,110,108,1,0,0,0,111,135,5,54,0,0,112,
		113,5,33,0,0,113,117,5,53,0,0,114,116,3,16,8,0,115,114,1,0,0,0,116,119,
		1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,
		0,120,135,5,54,0,0,121,122,5,34,0,0,122,126,5,53,0,0,123,125,3,18,9,0,
		124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,129,
		1,0,0,0,128,126,1,0,0,0,129,135,5,54,0,0,130,131,5,1,0,0,131,135,5,59,
		0,0,132,133,5,2,0,0,133,135,5,59,0,0,134,94,1,0,0,0,134,103,1,0,0,0,134,
		112,1,0,0,0,134,121,1,0,0,0,134,130,1,0,0,0,134,132,1,0,0,0,135,7,1,0,
		0,0,136,144,5,59,0,0,137,138,5,59,0,0,138,139,5,3,0,0,139,144,3,10,5,0,
		140,141,5,59,0,0,141,142,5,1,0,0,142,144,5,59,0,0,143,136,1,0,0,0,143,
		137,1,0,0,0,143,140,1,0,0,0,144,9,1,0,0,0,145,150,3,42,21,0,146,147,5,
		4,0,0,147,149,3,42,21,0,148,146,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,
		0,150,151,1,0,0,0,151,11,1,0,0,0,152,150,1,0,0,0,153,154,5,59,0,0,154,
		155,5,1,0,0,155,156,5,59,0,0,156,13,1,0,0,0,157,158,3,12,6,0,158,159,5,
		3,0,0,159,161,5,59,0,0,160,162,3,42,21,0,161,160,1,0,0,0,161,162,1,0,0,
		0,162,15,1,0,0,0,163,164,3,12,6,0,164,165,5,3,0,0,165,166,3,42,21,0,166,
		17,1,0,0,0,167,168,3,12,6,0,168,169,5,3,0,0,169,171,3,26,13,0,170,172,
		3,42,21,0,171,170,1,0,0,0,171,172,1,0,0,0,172,19,1,0,0,0,173,175,3,4,2,
		0,174,173,1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,178,3,22,11,0,177,
		176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,21,1,0,
		0,0,181,182,5,30,0,0,182,192,3,24,12,0,183,184,5,31,0,0,184,192,3,24,12,
		0,185,186,5,26,0,0,186,192,3,66,33,0,187,188,5,29,0,0,188,192,3,26,13,
		0,189,190,5,25,0,0,190,192,3,26,13,0,191,181,1,0,0,0,191,183,1,0,0,0,191,
		185,1,0,0,0,191,187,1,0,0,0,191,189,1,0,0,0,192,23,1,0,0,0,193,195,3,26,
		13,0,194,193,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,198,5,53,0,0,
		197,199,3,22,11,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,
		201,1,0,0,0,201,202,1,0,0,0,202,203,5,54,0,0,203,25,1,0,0,0,204,205,7,
		0,0,0,205,27,1,0,0,0,206,209,3,34,17,0,207,209,3,40,20,0,208,206,1,0,0,
		0,208,207,1,0,0,0,209,217,1,0,0,0,210,213,5,4,0,0,211,214,3,34,17,0,212,
		214,3,40,20,0,213,211,1,0,0,0,213,212,1,0,0,0,214,216,1,0,0,0,215,210,
		1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,29,1,0,0,0,
		219,217,1,0,0,0,220,225,5,59,0,0,221,222,5,4,0,0,222,224,5,59,0,0,223,
		221,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,31,1,0,
		0,0,227,225,1,0,0,0,228,229,6,16,-1,0,229,230,5,44,0,0,230,245,3,34,17,
		0,231,232,5,5,0,0,232,245,3,34,17,0,233,235,5,59,0,0,234,236,3,68,34,0,
		235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,245,
		1,0,0,0,239,245,3,48,24,0,240,241,5,57,0,0,241,242,3,32,16,0,242,243,5,
		58,0,0,243,245,1,0,0,0,244,228,1,0,0,0,244,231,1,0,0,0,244,233,1,0,0,0,
		244,239,1,0,0,0,244,240,1,0,0,0,245,266,1,0,0,0,246,247,10,9,0,0,247,248,
		7,1,0,0,248,265,3,34,17,0,249,250,10,8,0,0,250,251,7,2,0,0,251,265,3,34,
		17,0,252,253,10,7,0,0,253,254,7,3,0,0,254,265,3,34,17,0,255,256,10,6,0,
		0,256,257,7,4,0,0,257,265,3,34,17,0,258,259,10,5,0,0,259,260,7,5,0,0,260,
		265,3,34,17,0,261,262,10,4,0,0,262,263,7,6,0,0,263,265,3,34,17,0,264,246,
		1,0,0,0,264,249,1,0,0,0,264,252,1,0,0,0,264,255,1,0,0,0,264,258,1,0,0,
		0,264,261,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,
		33,1,0,0,0,268,266,1,0,0,0,269,274,3,32,16,0,270,274,3,44,22,0,271,274,
		3,36,18,0,272,274,3,38,19,0,273,269,1,0,0,0,273,270,1,0,0,0,273,271,1,
		0,0,0,273,272,1,0,0,0,274,35,1,0,0,0,275,277,5,57,0,0,276,278,3,30,15,
		0,277,276,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,280,5,58,0,0,280,
		281,5,16,0,0,281,282,3,66,33,0,282,37,1,0,0,0,283,284,3,40,20,0,284,285,
		5,3,0,0,285,286,5,59,0,0,286,288,5,57,0,0,287,289,3,28,14,0,288,287,1,
		0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,5,58,0,0,291,299,1,0,0,0,
		292,293,5,59,0,0,293,295,5,57,0,0,294,296,3,28,14,0,295,294,1,0,0,0,295,
		296,1,0,0,0,296,297,1,0,0,0,297,299,5,58,0,0,298,283,1,0,0,0,298,292,1,
		0,0,0,299,39,1,0,0,0,300,301,5,40,0,0,301,302,5,59,0,0,302,41,1,0,0,0,
		303,307,5,59,0,0,304,307,5,19,0,0,305,307,3,36,18,0,306,303,1,0,0,0,306,
		304,1,0,0,0,306,305,1,0,0,0,307,43,1,0,0,0,308,310,5,55,0,0,309,311,3,
		34,17,0,310,309,1,0,0,0,310,311,1,0,0,0,311,316,1,0,0,0,312,313,5,4,0,
		0,313,315,3,34,17,0,314,312,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,
		317,1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,328,5,56,0,0,320,321,3,
		46,23,0,321,322,5,3,0,0,322,325,3,46,23,0,323,324,5,3,0,0,324,326,3,46,
		23,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,308,1,0,0,0,327,
		320,1,0,0,0,328,45,1,0,0,0,329,332,5,59,0,0,330,332,5,60,0,0,331,329,1,
		0,0,0,331,330,1,0,0,0,332,47,1,0,0,0,333,341,5,59,0,0,334,341,5,60,0,0,
		335,341,5,61,0,0,336,341,5,63,0,0,337,341,5,64,0,0,338,341,5,18,0,0,339,
		341,5,19,0,0,340,333,1,0,0,0,340,334,1,0,0,0,340,335,1,0,0,0,340,336,1,
		0,0,0,340,337,1,0,0,0,340,338,1,0,0,0,340,339,1,0,0,0,341,49,1,0,0,0,342,
		343,3,32,16,0,343,344,5,42,0,0,344,345,3,34,17,0,345,368,1,0,0,0,346,368,
		5,20,0,0,347,348,5,21,0,0,348,368,3,34,17,0,349,350,5,22,0,0,350,355,5,
		59,0,0,351,352,5,17,0,0,352,354,5,59,0,0,353,351,1,0,0,0,354,357,1,0,0,
		0,355,353,1,0,0,0,355,356,1,0,0,0,356,368,1,0,0,0,357,355,1,0,0,0,358,
		359,5,23,0,0,359,360,5,59,0,0,360,362,5,57,0,0,361,363,3,30,15,0,362,361,
		1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,365,5,58,0,0,365,368,3,66,
		33,0,366,368,3,38,19,0,367,342,1,0,0,0,367,346,1,0,0,0,367,347,1,0,0,0,
		367,349,1,0,0,0,367,358,1,0,0,0,367,366,1,0,0,0,368,51,1,0,0,0,369,370,
		5,25,0,0,370,371,7,0,0,0,371,372,3,66,33,0,372,53,1,0,0,0,373,377,3,56,
		28,0,374,376,3,58,29,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,
		377,378,1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,380,382,3,60,30,0,381,
		380,1,0,0,0,381,382,1,0,0,0,382,55,1,0,0,0,383,384,5,47,0,0,384,385,3,
		34,17,0,385,386,3,66,33,0,386,57,1,0,0,0,387,388,5,48,0,0,388,389,3,34,
		17,0,389,390,3,66,33,0,390,59,1,0,0,0,391,392,5,49,0,0,392,393,3,66,33,
		0,393,61,1,0,0,0,394,395,5,51,0,0,395,396,3,34,17,0,396,397,3,66,33,0,
		397,63,1,0,0,0,398,399,5,52,0,0,399,400,5,59,0,0,400,403,5,50,0,0,401,
		404,3,44,22,0,402,404,5,59,0,0,403,401,1,0,0,0,403,402,1,0,0,0,404,405,
		1,0,0,0,405,406,3,66,33,0,406,65,1,0,0,0,407,408,5,53,0,0,408,409,3,0,
		0,0,409,410,5,54,0,0,410,67,1,0,0,0,411,412,5,41,0,0,412,413,3,46,23,0,
		413,69,1,0,0,0,44,75,77,81,86,99,108,117,126,134,143,150,161,171,174,179,
		191,194,200,208,213,217,225,237,244,264,266,273,277,288,295,298,306,310,
		316,325,327,331,340,355,362,367,377,381,403
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
